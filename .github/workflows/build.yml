name: Rust

on:
  push:
    branches: [ "main" ]
  pull_request:
  
  workflow_dispatch:
    inputs:
      name:
        description: 'Github Actions'
        required: true
        default: 'Github Actions'

env:
  CARGO_TERM_COLOR: always

jobs:
  Build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    
    # We need Rust 1.62 to compile cargo-bpf because it is compiled with LLVM 14
    # but Rust 1.65+ is compiled with LLVM 15. To prevent conflict of LLVM versions,
    # we will remove Rust 1.66 (or the latest Rust) which comes packed with GitHub Actions
    # and manually install Rust 1.62.
    - name: Remove Latest Rust
      run: rustup self uninstall -y
    - name: Install Rust 1.62.0
      run: |
        wget -O rustup-init.sh https://sh.rustup.rs/
        sh rustup-init.sh --default-toolchain=1.62.0 -y

    - name: Set up cargo cache
      uses: actions/cache@v3
      continue-on-error: false
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/            
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: ${{ runner.os }}-cargo-
    
    # Install elf-dev and pkg-config packages
    - name: Install Packages
      run: sudo apt install libelf-dev pkg-config -qy
      
    # Install LLVM 14 and Clang for compiling cargo-bpf
    - name: Install LLVM and Clang
      uses: KyleMayes/install-llvm-action@v1
      with:
       version: "14"

      # Build Cargo-BPF from Git source
    - name: Build Cargo-BPF
      run: | 
        if [ -d "bpf/release" ]; then
          echo "Binary already exists, skipping build step."
        else
          cargo install cargo-bpf
        fi
      
    # Build CS-FW Probes first
    - name: Build CS-FW Probes
      run: |
        cd probes
        cargo build
        cargo bpf build --target-dir=../target
    
    # Now finally CS-FW completely and generate executable binary
    - name: Build CS-FW
      run: cargo build
      
    # Upload the executable binary file
    - name: Upload the build
      uses: actions/upload-artifact@v3
      with:
        name: CS-FW Build
        path: /home/runner/work/cs-fw/cs-fw/target/debug/csfw
        if-no-files-found: error
