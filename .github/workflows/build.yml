name: Rust

on:
  push:
    branches: [ "main" ]
  pull_request:
  
  workflow_dispatch:
    inputs:
      name:
        description: 'Github Actions'
        required: true
        default: 'Github Actions'

env:
  CARGO_TERM_COLOR: always
  CARGO_BUILD_JOBS: 8

jobs:
  Build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up cargo cache
      id: cache-cargo
      uses: actions/cache@v3
      continue-on-error: false
      with:
        path: |
          ~/.cargo
          target/
          probes/target/
          llvm/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: ${{ runner.os }}-cargo-
    
    # We need Rust 1.62 to compile cargo-bpf because it is compiled with LLVM 14
    # but Rust 1.65+ is compiled with LLVM 15. To prevent conflict of LLVM versions,
    # we will remove Rust 1.66 (or the latest Rust) which comes packed with GitHub Actions
    # and manually install Rust 1.62.
    - name: Remove Latest Rust and Install Rust 1.62
      run: |
        rust_version=$(rustc --version | awk '{print $2}')
        if [[ "rust_version" == "1.62.0" ]]; then
          echo "Rust 1.62.0 is already installed."
        else
          rustup self uninstall -y
          
          wget -O rustup-init.sh https://sh.rustup.rs/
          sh rustup-init.sh --default-toolchain=1.62.0 -y
        fi
    
    # Install elf-dev and pkg-config packages
    - name: Install Packages
      run: sudo apt install libelf-dev pkg-config -qy
      
    # Install LLVM 14 and Clang for compiling cargo-bpf
    - name: Install LLVM and Clang
      uses: KyleMayes/install-llvm-action@v1
      with:
       version: "14"
       cached: ${{ steps.cache-cargo.outputs.cache-hit }}

      # Build Cargo-BPF from Git source
    - name: Build Cargo-BPF
      run: | 
        if [ -d "target/bpf/release" ]; then
          echo "Build already exists; skipping..."
        else
          cargo install cargo-bpf --git https://github.com/foniod/redbpf.git
        fi

    # Build CS-FW Probes
    - name: Build CS-FW Probes and Cargo BPF
      if: steps.cache-cargo.outputs.cache-hit != 'true'
      run: cd probes && cargo build && cargo bpf build --target-dir=../target

    # Build CS-FW Probes BPF Module
    - name: Build CS-FW Probes Only
      if: steps.cache-cargo.outputs.cache-hit == 'true'
      run: cd probes && cargo build --target-dir=../target
    
    # Now finally CS-FW completely and generate executable binary
    - name: Build CS-FW
      run: cargo build

    # Upload the executable binary file
    - name: Upload the build
      uses: actions/upload-artifact@v3
      with:
        name: CS-FW Build
        path: /home/runner/work/cs-fw/cs-fw/target/debug/csfw
        if-no-files-found: error
